#!/usr/bin/env ruby
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
ENV['BUNDLE_GEMFILE'] = File.expand_path(File.join(File.dirname(__FILE__), '..', 'Gemfile'))

require 'rubygems'
require 'bundler/setup'
require 'trollop'
require 'chunky_png'
require 'fractal_noise'

options = Trollop::options do
  banner  "Usage: terrain [options]"
  banner ""
  opt :algorithm, "Noise algorithm (#{FractalNoise::ALGORITHMS.join(', ')})", :type => :string, :default => 'value'
  opt :seed,      "Noise random seed",                                        :type => :int,    :default => 123456
  banner ""
  opt :octaves, "Number of octaves to combine", :type => :int, :default => 6
  banner  ""
  opt :width,  "Output width",  :type => :int, :default => 128
  opt :height, "Output height", :type => :int, :default => 128
  banner ""
end

Trollop::die :algorithm, "should be one of the following: #{FractalNoise::ALGORITHMS.join(', ')}" unless FractalNoise::ALGORITHMS.member?(options[:algorithm])
Trollop::die :octaves,   "should be greater than 0" unless options[:octaves] > 0
Trollop::die :height,    "should be greater than 0" unless options[:height]  > 0
Trollop::die :width,     "should be greater than 0" unless options[:width]   > 0

# initialize noise
noise = case options[:algorithm]
  when 'value'
    FractalNoise::ValueNoise.new(options[:width], options[:height], Random.new(options[:seed]))
  when 'perlin'
    FractalNoise::PerlinNoise.new(options[:width], options[:height], Random.new(options[:seed]))
end

# generate the noise
noise.generate(options[:octaves], 0.6) 

# apply filters
noise.normalize 
noise.gamma_filter(1.2)
noise.median_filter(2)

# output noise as a terrain
noise.output("output/terrain-#{options[:seed]}.png") do |value|
  if value <= 0.20
    ChunkyPNG::Color.from_hex('#31586f')
  elsif value <= 0.475
    ChunkyPNG::Color.from_hex('#345f77')
  elsif value <= 0.5
    ChunkyPNG::Color.from_hex('#396882')
  elsif value <= 0.65
    ChunkyPNG::Color.from_hex('#544e41')
  else
    ChunkyPNG::Color.from_hex('#5c5543')
  end
end
