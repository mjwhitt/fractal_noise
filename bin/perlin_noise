#!/usr/bin/env ruby
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
ENV['BUNDLE_GEMFILE'] = File.expand_path(File.join(File.dirname(__FILE__), '..', 'Gemfile'))

require 'rubygems'
require 'bundler/setup'
require 'trollop'
require 'chunky_png'
require 'fractal_noise'

options = Trollop::options do
  version "perlin_noise #{FractalNoise::VERSION} (c) 2014 Melissa Whittington"
  banner  "Usage: perlin_noise [options]"
  banner  ""
  opt :seed,   "Noise seed",   :type => :int, :default => 123456
  opt :width,  "Noise width",  :type => :int, :default => 128
  opt :height, "Noise height", :type => :int, :default => 128
  banner ""
  opt :output_octaves, "Also output each octave", :type => :boolean
  banner ""
  opt :octaves,     "Number of octaves to combine",       :type => :int,   :default => 6
  opt :persistence, "Persistence when combining octaves", :type => :float, :default => 0.6
  banner ""
  opt :normalize,     "Normalize the noise.",   :type => :boolean
  opt :gamma_filter,  "Apply a gamma filter.",  :type => :float
  opt :median_filter, "Apply a median filter.", :type => :int
  banner ""
end

Trollop::die :persistence, "should be a value greater than 0.0"          unless options[:persistence]  > 0.0
Trollop::die :persistence, "should be a value less than or equal to 1.0" unless options[:persistence] <= 1.0

noise = FractalNoise::PerlinNoise.new(options[:width], options[:height], Random.new(options[:seed]))

# generate the noise
noise.generate(options[:octaves], options[:persistence])

# apply filters
noise.normalize                              if options[:normalize]
noise.gamma_filter(options[:gamma_filter])   if options[:gamma_filter]
noise.median_filter(options[:median_filter]) if options[:median_filter]

# output noise as a grayscale image
noise.grayscale("perlin_noise-#{options[:seed]}.png")

# output each octave as a grayscale image
options[:octaves].times do |o|
  noise.output_xy("perlin_noise-#{options[:seed]}_octave-#{o}.png") do |x,y|
    value = noise.octave_noise[o][x][y]
    color = (value == 1.0 ? 255.0 : value * 256.0).floor
    ChunkyPNG::Color.rgb(color, color, color)
  end
end if options[:output_octaves]
