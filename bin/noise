#!/usr/bin/env ruby
$:.push File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
ENV['BUNDLE_GEMFILE'] = File.expand_path(File.join(File.dirname(__FILE__), '..', 'Gemfile'))

require 'rubygems'
require 'bundler/setup'
require 'trollop'
require 'chunky_png'
require 'fractal_noise'

options = Trollop::options do
  version "noise #{FractalNoise::VERSION} (c) 2014 Melissa Whittington"
  banner  "Usage: noise [options]"
  banner  ""
  opt :algorithm, "Noise algorithm (#{FractalNoise::ALGORITHMS.join(', ')})", :type => :string, :default => 'value'
  opt :seed,      "Noise random seed",                                        :type => :int,    :default => 123456
  banner  ""
  opt :octave, "Which octave to generate", :type => :int, :default => 6
  banner  ""
  opt :width,  "Output width",  :type => :int, :default => 128
  opt :height, "Output height", :type => :int, :default => 128
  banner ""
end

Trollop::die :algorithm, "should be one of the following: #{FractalNoise::ALGORITHMS.join(', ')}" unless FractalNoise::ALGORITHMS.member?(options[:algorithm])
Trollop::die :octave,    "should be greater than or equal to 0" unless options[:octave] >= 0
Trollop::die :height,    "should be greater than 0" unless options[:height] > 0
Trollop::die :width,     "should be greater than 0" unless options[:width] > 0

# initialize noise
noise = case options[:algorithm]
  when 'value'
    FractalNoise::ValueNoise.new(options[:width], options[:height], Random.new(options[:seed]))
  when 'perlin'
    FractalNoise::PerlinNoise.new(options[:width], options[:height], Random.new(options[:seed]))
end
octave = noise.noise(options[:octave])

# output noise as a grayscale image
noise.output_xy("#{options[:algorithm]}-#{options[:seed]}-octave-#{options[:octave]}.png") do |x,y|
  value = octave[x][y]
  color = (value == 1.0 ? 255.0 : value * 256.0).floor
  ChunkyPNG::Color.rgb(color, color, color)
end
